# your code goes here

class Node(object):
	def __init__(self, d, n = None):
		self.data = d
		self.next_node = n
	
	def get_next(self):
		return self.next_node
		
	def set_next(self, n):
		self.next_node = n
		
	def get_data(self):
		return self.data
		
	def set_data(d):
		self.data = d
		
	def has_next(self):
		if self.get_next() == None:
			return False
		else:
			return True
			
	def to_string(self):
		return "Node value: " + str(self.data)
		
class LinkedList(object):
	def __init__(self, r = None):
		self.root = r
		self.size = 0
		
	
	def get_size(self):
		return self.size
		
	def add(self, d):
		new_node = Node(d, self.root)
		self.root = new_node
		self.size += 1
		
	def add_node(self, n):
		n.set_next(self.root)
		self.root = n
		self.size += 1
		
	def remove(self, d):
		this_node = self.root
		prev_node = None
		while this_node is not None:
			if this_node.get_data == d:
				if prev_node is not None:
					prev_node.set_next(this_node.get_next())
				else:
					self.root = this_node.get_next()
				self.size -= 1
				return True
			else:
				prev_node = this_node
				this_node = this_node.get_next()
		return False
		
	def find(self, d):
		this_node = self.root
		while this_node is not None:
			if this_node.data == d:
				return True
			else:
				this_node = this_node.get_next()
		return False
		
	def print_list(self):
		print("--- Printing list ---")
		if self.root is None:
			return
		this_node = self.root
		print(this_node.to_string())
		while (this_node.has_next()):
			this_node = this_node.get_next()
			print(this_node.to_string())
		
	def my_sort(self):
		if self.size > 1:
			my_list = []
			current_node = self.root
			my_list.append(self.root.get_data())
			while current_node.has_next():
				current_node = current_node.get_next()
				value = current_node.get_data()
				my_list.append(value)
			my_list.sort()
			my_list = my_list[::-1]
			new_linked_list = LinkedList()
			for el in my_list:
				new_linked_list.add(el)
			return new_linked_list
		return self
		
	def my_converter(self):
		newnewlist = []
		current_node = self.root
		newnew.append(self.root.get_data())
		while current_node.has_next():
			current_node = current_node.get_next()
			value = current_node.get_data()
			newnewlist.append(value)
		newnewlist2 = newnewlist.sort()
		return newnewlist2

		
def main():
	myList = LinkedList()
	myList.add(1)
	myList.add(2)
	myList.add(4)
	second_llist = LinkedList()
	second_llist.add(1)
	second_llist.add(3)
	second_llist.add(4)
	myList.print_list()
	second_llist.print_list()
	myyList = LinkedList()
	myyList.add(10)
	myyList.add(20)
	myyList.add(40)
	myyList.print_list()
	result = myyList.my_sort()
	result.print_list()
	test_case = ['1']
	test_case = my_converter(myyList)
	print(test_case)
	
		
	
main()
